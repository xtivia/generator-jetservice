buildscript {
  repositories {
    mavenCentral() 
  }
  dependencies {
    classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:+'
  }
}

repositories {
	mavenLocal()
    mavenCentral()
	maven {
		url "http://cdn.repository.liferay.com/nexus/content/groups/public"
	}
}

apply plugin: 'java'
apply plugin: 'biz.aQute.bnd.builder'

// load some properties from the main config file
import groovy.json.JsonSlurper
def propsSlurper = new JsonSlurper()
def propsJson = propsSlurper.parse file('.yo-rc.json')
def serviceName = propsJson['generator-jetservice'].serviceName
def serviceTitle = propsJson['generator-jetservice'].serviceTitle

/*
 This build script uses 2 configurations including the new 'compileOnly' introduced in Grade 2.12
 
 The script leverages this to include any dependencies (along with their transitive dependencies)
 from the 'compile' scope into the generated bundle. Items in the 'compileOnly' scope are used
 during compilation but are not included in the generated JAR. This is very similar to the 'provided'
 scope using when building traditional WARs.
 
 */
dependencies {
	compileOnly group: "com.liferay.portal",  name: "com.liferay.portal.kernel",                 version: "2.0.0"
    compileOnly group: 'com.liferay',         name: 'com.liferay.portal.configuration.metatype', version: '2.0.0'
	compileOnly group: 'javax.ws.rs',         name: 'javax.ws.rs-api',                           version: '2.0.1'
	compileOnly group: "javax.portlet",       name: "portlet-api",                               version: "2.0"
	compileOnly group: "javax.servlet",       name: "servlet-api",                               version: "2.5"
	compileOnly group: "biz.aQute.bnd",       name: "biz.aQute.bndlib",                          version: "3.1.0"
	compileOnly group: "org.osgi",            name: "org.osgi.compendium",                       version: "5.0.0"

	// any dependencies in the 'compile' configuration WILL be included in the generated JAR. Use the
	// 'compileOnly' configuration for compiling with items available inside the OSGi container
	compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: jackson_version
}

/*
The logic below is used during the bundle task that generates the OSGi JAR. It allows us to 
automatically include dependencies from the 'compile' configuration (both in terms of packaging
and classpath) without having to manage continuous updating of a bnd.bnd file
*/
def bundleClassPath() {
    def list = []
    configurations.compile.each {
        list += 'OSGI-INF/lib/' + it.name
    }
    return list.join(',')
}

def includeResource() {
  def list = []
  configurations.compile.each {
    list += 'OSGI-INF/lib/' + it.name + "=" + it.path
  }
  return list.join(',')
}

jar {
    manifest {
        attributes(
		    'Bundle-Version'      : '1.0.0',
		    'Bundle-Name'         : serviceTitle,
			'Bundle-SymbolicName' : serviceName,
			'Bundle-Description'  : serviceTitle,
		    '-metatype'           : '*',
		    '-buildpath'          : 'osgi.annotation; version=6.0.1,osgi.core; version=6.0,osgi.cmpn; version=6.0',
		    'Import-Package'      : 'javax.servlet.http,javax.servlet,*',
		    'Bundle-ClassPath'    : bundleClassPath(),
		    '-includeresource'    : includeResource(),
		    '-wab'                : ''
		)
    }
}

task deploy doFirst {
    new Deployer().deploy(jar.archivePath,true)
}